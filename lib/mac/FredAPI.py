# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FredAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FredAPI')
    _FredAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FredAPI', [dirname(__file__)])
        except ImportError:
            import _FredAPI
            return _FredAPI
        try:
            _mod = imp.load_module('_FredAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FredAPI = swig_import_helper()
    del swig_import_helper
else:
    import _FredAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def Init(datadir):
    return _FredAPI.Init(datadir)
Init = _FredAPI.Init

def GetPThreads():
    return _FredAPI.GetPThreads()
GetPThreads = _FredAPI.GetPThreads

def SetPThreads(numThreads):
    return _FredAPI.SetPThreads(numThreads)
SetPThreads = _FredAPI.SetPThreads

def RedirectOutput(out1, out2):
    return _FredAPI.RedirectOutput(out1, out2)
RedirectOutput = _FredAPI.RedirectOutput

def RedirectError(err1, err2):
    return _FredAPI.RedirectError(err1, err2)
RedirectError = _FredAPI.RedirectError

def ResetAll():
    return _FredAPI.ResetAll()
ResetAll = _FredAPI.ResetAll

def ResetFields():
    return _FredAPI.ResetFields()
ResetFields = _FredAPI.ResetFields

def ResetPencilBeams():
    return _FredAPI.ResetPencilBeams()
ResetPencilBeams = _FredAPI.ResetPencilBeams

def ResetRays():
    return _FredAPI.ResetRays()
ResetRays = _FredAPI.ResetRays

def SetRandSeedRoot(seed):
    return _FredAPI.SetRandSeedRoot(seed)
SetRandSeedRoot = _FredAPI.SetRandSeedRoot

def GetRandSeedRoot():
    return _FredAPI.GetRandSeedRoot()
GetRandSeedRoot = _FredAPI.GetRandSeedRoot

def NumRegions():
    return _FredAPI.NumRegions()
NumRegions = _FredAPI.NumRegions

def Region_index(regID):
    return _FredAPI.Region_index(regID)
Region_index = _FredAPI.Region_index

def Region_info(ireg):
    return _FredAPI.Region_info(ireg)
Region_info = _FredAPI.Region_info

def AddRegion(regID):
    return _FredAPI.AddRegion(regID)
AddRegion = _FredAPI.AddRegion

def GetRegion_extent(ireg):
    return _FredAPI.GetRegion_extent(ireg)
GetRegion_extent = _FredAPI.GetRegion_extent

def SetRegion_extent(ireg, L):
    return _FredAPI.SetRegion_extent(ireg, L)
SetRegion_extent = _FredAPI.SetRegion_extent

def GetRegion_origin(ireg):
    return _FredAPI.GetRegion_origin(ireg)
GetRegion_origin = _FredAPI.GetRegion_origin

def SetRegion_origin(ireg, O):
    return _FredAPI.SetRegion_origin(ireg, O)
SetRegion_origin = _FredAPI.SetRegion_origin

def GetRegion_pivot(ireg):
    return _FredAPI.GetRegion_pivot(ireg)
GetRegion_pivot = _FredAPI.GetRegion_pivot

def SetRegion_pivot(ireg, pivot):
    return _FredAPI.SetRegion_pivot(ireg, pivot)
SetRegion_pivot = _FredAPI.SetRegion_pivot

def GetRegion_voxels(ireg):
    return _FredAPI.GetRegion_voxels(ireg)
GetRegion_voxels = _FredAPI.GetRegion_voxels

def SetRegion_voxels(ireg, nn):
    return _FredAPI.SetRegion_voxels(ireg, nn)
SetRegion_voxels = _FredAPI.SetRegion_voxels

def SetRegion_material(ireg, imat):
    return _FredAPI.SetRegion_material(ireg, imat)
SetRegion_material = _FredAPI.SetRegion_material

def LoadRegion_CTscan(ireg, fpath):
    return _FredAPI.LoadRegion_CTscan(ireg, fpath)
LoadRegion_CTscan = _FredAPI.LoadRegion_CTscan
class RegionScorers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionScorers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegionScorers, name)
    __repr__ = _swig_repr
    trackScorer = _FredAPI.RegionScorers_trackScorer
    eDepScorer = _FredAPI.RegionScorers_eDepScorer
    doseScorer = _FredAPI.RegionScorers_doseScorer
    LETdScorer = _FredAPI.RegionScorers_LETdScorer
    countsScorer = _FredAPI.RegionScorers_countsScorer

    def __init__(self):
        this = _FredAPI.new_RegionScorers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FredAPI.delete_RegionScorers
    __del__ = lambda self: None
RegionScorers_swigregister = _FredAPI.RegionScorers_swigregister
RegionScorers_swigregister(RegionScorers)


def AddScorer(ireg, type):
    return _FredAPI.AddScorer(ireg, type)
AddScorer = _FredAPI.AddScorer

def Scorer_reset(ireg, iscorer):
    return _FredAPI.Scorer_reset(ireg, iscorer)
Scorer_reset = _FredAPI.Scorer_reset

def Scorer_evaluate(ireg, iscorer):
    return _FredAPI.Scorer_evaluate(ireg, iscorer)
Scorer_evaluate = _FredAPI.Scorer_evaluate

def Scorer_save(ireg, iscorer, fpath):
    return _FredAPI.Scorer_save(ireg, iscorer, fpath)
Scorer_save = _FredAPI.Scorer_save

def Scorer_buffer(ireg, iscorer, buffer):
    return _FredAPI.Scorer_buffer(ireg, iscorer, buffer)
Scorer_buffer = _FredAPI.Scorer_buffer

def NumMaterials():
    return _FredAPI.NumMaterials()
NumMaterials = _FredAPI.NumMaterials

def Material_index(matID):
    return _FredAPI.Material_index(matID)
Material_index = _FredAPI.Material_index

def Material_info(imat):
    return _FredAPI.Material_info(imat)
Material_info = _FredAPI.Material_info

def AddField(FID):
    return _FredAPI.AddField(FID)
AddField = _FredAPI.AddField

def DeleteField(FID):
    return _FredAPI.DeleteField(FID)
DeleteField = _FredAPI.DeleteField

def SetField_FoR(FID, O, f, u, l):
    return _FredAPI.SetField_FoR(FID, O, f, u, l)
SetField_FoR = _FredAPI.SetField_FoR

def GetField_FoR(FID):
    return _FredAPI.GetField_FoR(FID)
GetField_FoR = _FredAPI.GetField_FoR

def AddPB(FID, PBID):
    return _FredAPI.AddPB(FID, PBID)
AddPB = _FredAPI.AddPB

def DeletePB(FID, PBID):
    return _FredAPI.DeletePB(FID, PBID)
DeletePB = _FredAPI.DeletePB

def AddRays(rays, particle):
    return _FredAPI.AddRays(rays, particle)
AddRays = _FredAPI.AddRays

def CheckRays(rays, particle):
    return _FredAPI.CheckRays(rays, particle)
CheckRays = _FredAPI.CheckRays

def GetNumRays():
    return _FredAPI.GetNumRays()
GetNumRays = _FredAPI.GetNumRays

def CloseSetup():
    return _FredAPI.CloseSetup()
CloseSetup = _FredAPI.CloseSetup

def ActivateEloss(bool_onoff):
    return _FredAPI.ActivateEloss(bool_onoff)
ActivateEloss = _FredAPI.ActivateEloss

def ActivateFluc(bool_onoff):
    return _FredAPI.ActivateFluc(bool_onoff)
ActivateFluc = _FredAPI.ActivateFluc

def ActivateMCS(bool_onoff):
    return _FredAPI.ActivateMCS(bool_onoff)
ActivateMCS = _FredAPI.ActivateMCS

def ActivateNuclear(bool_onoff):
    return _FredAPI.ActivateNuclear(bool_onoff)
ActivateNuclear = _FredAPI.ActivateNuclear

def ActivateNuclearElastic(bool_onoff):
    return _FredAPI.ActivateNuclearElastic(bool_onoff)
ActivateNuclearElastic = _FredAPI.ActivateNuclearElastic

def ActivateNuclearInelastic(bool_onoff):
    return _FredAPI.ActivateNuclearInelastic(bool_onoff)
ActivateNuclearInelastic = _FredAPI.ActivateNuclearInelastic

def TrackRays(iraymin, iraymax):
    return _FredAPI.TrackRays(iraymin, iraymax)
TrackRays = _FredAPI.TrackRays
# This file is compatible with both classic and new-style classes.


